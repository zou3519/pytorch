graph(%x : Float(*, *),
      %hx : Float(*, *),
      %cx : Float(*, *),
      %w_ih : Float(*, *),
      %w_hh : Float(*, *),
      %b_ih : Float(*),
      %b_hh : Float(*)):
  %hy : Float(*, *), %cy : Float(*, *) = prim::DifferentiableGraph_0(%cx, %b_hh, %b_ih, %hx, %w_hh, %x, %w_ih)
  %9 : (Float(*, *), Float(*, *)) = prim::TupleConstruct(%hy, %cy)
  return (%9)
with prim::DifferentiableGraph_0 = graph(%0 : Float(*, *),
      %1 : Float(*),
      %2 : Float(*),
      %3 : Float(*, *),
      %4 : Float(*, *),
      %5 : Float(*, *),
      %6 : Float(*, *)):
  %7 : Float(*, *) = aten::t(%6)
  %8 : Float(*, *) = aten::mm(%5, %7)
  %9 : Float(*, *) = aten::t(%4)
  %10 : Float(*, *) = aten::mm(%3, %9)
  %11 : int[] = aten::size(%8)
  %12 : int[] = aten::size(%10)
  %13 : int[] = aten::size(%2)
  %14 : int[] = aten::size(%1)
  %15 : Tensor[] = prim::ListConstruct(%1, %2, %8, %10)
  %16 : Tensor[] = aten::broadcast_tensors(%15)
  %17 : Tensor, %18 : Tensor, %19 : Tensor, %20 : Tensor = prim::ListUnpack(%16)
  %21 : int[] = prim::BroadcastSizes(%11, %12)
  %22 : int[] = prim::BroadcastSizes(%21, %13)
  %other_size.6 : int[] = aten::size(%0)
  %hy : Float(*, *), %25 : Float(*, *), %cy : Float(*, *), %outgate.1 : Float(*, *), %cellgate.1 : Float(*, *), %forgetgate.1 : Float(*, *), %ingate.1 : Float(*, *) = prim::FusionGroup_0(%0, %20, %19, %18, %17)
  %31 : int[] = aten::size(%25)
  %32 : int[] = aten::size(%outgate.1)
  %33 : int[] = aten::size(%cellgate.1)
  %34 : int[] = aten::size(%forgetgate.1)
  %35 : int[] = aten::size(%ingate.1)
  %36 : int[] = prim::BroadcastSizes(%34, %other_size.6)
  %37 : int[] = prim::BroadcastSizes(%35, %33)
  return (%hy, %cy, %7, %9, %11, %12, %21, %13, %22, %14, %ingate.1, %forgetgate.1, %cellgate.1, %outgate.1, %34, %other_size.6, %35, %33, %36, %37, %25, %32, %31)
with prim::FusionGroup_0 = graph(%0 : Float(*, *),
      %1 : Tensor,
      %2 : Tensor,
      %3 : Tensor,
      %4 : Tensor):
  %5 : Float(*, *), %6 : Float(*, *), %7 : Float(*, *), %8 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%4)
  %9 : Float(*, *), %10 : Float(*, *), %11 : Float(*, *), %12 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%3)
  %13 : Float(*, *), %14 : Float(*, *), %15 : Float(*, *), %16 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%2)
  %17 : Float(*, *), %18 : Float(*, *), %19 : Float(*, *), %20 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%1)
  %21 : int = prim::Constant[value=1]()
  %22 : Float(*, *) = aten::add(%13, %17, %21)
  %23 : Float(*, *) = aten::add(%14, %18, %21)
  %24 : Float(*, *) = aten::add(%15, %19, %21)
  %25 : Float(*, *) = aten::add(%16, %20, %21)
  %26 : Float(*, *) = aten::add(%22, %9, %21)
  %27 : Float(*, *) = aten::add(%23, %10, %21)
  %28 : Float(*, *) = aten::add(%24, %11, %21)
  %29 : Float(*, *) = aten::add(%25, %12, %21)
  %30 : Float(*, *) = aten::add(%26, %5, %21)
  %31 : Float(*, *) = aten::add(%27, %6, %21)
  %32 : Float(*, *) = aten::add(%28, %7, %21)
  %33 : Float(*, *) = aten::add(%29, %8, %21)
  %ingate.1 : Float(*, *) = aten::sigmoid(%30)
  %forgetgate.1 : Float(*, *) = aten::sigmoid(%31)
  %cellgate.1 : Float(*, *) = aten::tanh(%32)
  %outgate.1 : Float(*, *) = aten::sigmoid(%33)
  %38 : Float(*, *) = aten::mul(%forgetgate.1, %0)
  %39 : Float(*, *) = aten::mul(%ingate.1, %cellgate.1)
  %cy : Float(*, *) = aten::add(%38, %39, %21)
  %41 : Float(*, *) = aten::tanh(%cy)
  %hy : Float(*, *) = aten::mul(%outgate.1, %41)
  return (%hy, %41, %cy, %outgate.1, %cellgate.1, %forgetgate.1, %ingate.1)
