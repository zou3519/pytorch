graph(%0 : Double(1, 3, 224, 224),
      %1 : Double(64, 3, 11, 11),
      %2 : Double(64),
      %3 : Double(192, 64, 5, 5),
      %4 : Double(192),
      %5 : Double(384, 192, 3, 3),
      %6 : Double(384),
      %7 : Double(256, 384, 3, 3),
      %8 : Double(256),
      %9 : Double(256, 256, 3, 3),
      %10 : Double(256),
      %11 : Double(4096, 9216),
      %12 : Double(4096),
      %13 : Double(4096, 4096),
      %14 : Double(4096),
      %15 : Double(1000, 4096),
      %16 : Double(1000)):
  %17 : int = prim::Constant[value=4](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %18 : int[] = prim::ListConstruct(%17, %17), scope: AlexNet/Sequential[features]/Conv2d[0]
  %19 : int = prim::Constant[value=2](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %20 : int[] = prim::ListConstruct(%19, %19), scope: AlexNet/Sequential[features]/Conv2d[0]
  %21 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %22 : int[] = prim::ListConstruct(%21, %21), scope: AlexNet/Sequential[features]/Conv2d[0]
  %23 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %24 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %25 : int[] = prim::ListConstruct(%24, %24), scope: AlexNet/Sequential[features]/Conv2d[0]
  %26 : bool = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %input.1 : Double(1, 64, 55, 55) = aten::_convolution(%0, %1, %2, %18, %20, %22, %23, %25, %21, %23, %23, %26), scope: AlexNet/Sequential[features]/Conv2d[0]
  %28 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/ReLU[1]
  %input.2 : Double(1, 64, 55, 55) = aten::threshold_(%input.1, %28, %28), scope: AlexNet/Sequential[features]/ReLU[1]
  %30 : int = prim::Constant[value=3](), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %31 : int[] = prim::ListConstruct(%30, %30), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %32 : Double(1, 64, 27, 27), %33 : Long(1, 64, 27, 27) = aten::max_pool2d_with_indices(%input.2, %31, %20, %25, %22, %23), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %input.3 : Double(1, 192, 27, 27) = aten::_convolution(%32, %3, %4, %22, %20, %22, %23, %25, %21, %23, %23, %26), scope: AlexNet/Sequential[features]/Conv2d[3]
  %input.4 : Double(1, 192, 27, 27) = aten::threshold_(%input.3, %28, %28), scope: AlexNet/Sequential[features]/ReLU[4]
  %36 : Double(1, 192, 13, 13), %37 : Long(1, 192, 13, 13) = aten::max_pool2d_with_indices(%input.4, %31, %20, %25, %22, %23), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %input.5 : Double(1, 384, 13, 13) = aten::_convolution(%36, %5, %6, %22, %22, %22, %23, %25, %21, %23, %23, %26), scope: AlexNet/Sequential[features]/Conv2d[6]
  %39 : Double(1, 384, 13, 13) = aten::threshold_(%input.5, %28, %28), scope: AlexNet/Sequential[features]/ReLU[7]
  %input.6 : Double(1, 256, 13, 13) = aten::_convolution(%39, %7, %8, %22, %22, %22, %23, %25, %21, %23, %23, %26), scope: AlexNet/Sequential[features]/Conv2d[8]
  %41 : Double(1, 256, 13, 13) = aten::threshold_(%input.6, %28, %28), scope: AlexNet/Sequential[features]/ReLU[9]
  %input.7 : Double(1, 256, 13, 13) = aten::_convolution(%41, %9, %10, %22, %22, %22, %23, %25, %21, %23, %23, %26), scope: AlexNet/Sequential[features]/Conv2d[10]
  %input.8 : Double(1, 256, 13, 13) = aten::threshold_(%input.7, %28, %28), scope: AlexNet/Sequential[features]/ReLU[11]
  %input.9 : Double(1, 256, 6, 6), %45 : Long(1, 256, 6, 6) = aten::max_pool2d_with_indices(%input.8, %31, %20, %25, %22, %23), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %46 : int = prim::Constant[value=6](), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %47 : int[] = prim::ListConstruct(%46, %46), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %48 : Double(1, 256, 6, 6) = aten::adaptive_avg_pool2d(%input.9, %47), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %49 : int = aten::size(%48, %24), scope: AlexNet
  %50 : Long() = prim::NumToTensor(%49), scope: AlexNet
  %51 : int = prim::Int(%50), scope: AlexNet
  %52 : int = prim::Constant[value=9216](), scope: AlexNet
  %53 : int[] = prim::ListConstruct(%51, %52), scope: AlexNet
  %input.10 : Double(1, 9216) = aten::view(%48, %53), scope: AlexNet
  %55 : float = prim::Constant[value=0.5](), scope: AlexNet/Sequential[classifier]/Dropout[0]
  %input.11 : Double(1, 9216) = aten::dropout(%input.10, %55, %26), scope: AlexNet/Sequential[classifier]/Dropout[0]
  %57 : Double(9216!, 4096!) = aten::t(%11), scope: AlexNet/Sequential[classifier]/Linear[1]
  %input.12 : Double(1, 4096) = aten::addmm(%12, %input.11, %57, %21, %21), scope: AlexNet/Sequential[classifier]/Linear[1]
  %input.13 : Double(1, 4096) = aten::threshold_(%input.12, %28, %28), scope: AlexNet/Sequential[classifier]/ReLU[2]
  %input.14 : Double(1, 4096) = aten::dropout(%input.13, %55, %26), scope: AlexNet/Sequential[classifier]/Dropout[3]
  %61 : Double(4096!, 4096!) = aten::t(%13), scope: AlexNet/Sequential[classifier]/Linear[4]
  %input.15 : Double(1, 4096) = aten::addmm(%14, %input.14, %61, %21, %21), scope: AlexNet/Sequential[classifier]/Linear[4]
  %input : Double(1, 4096) = aten::threshold_(%input.15, %28, %28), scope: AlexNet/Sequential[classifier]/ReLU[5]
  %64 : Double(4096!, 1000!) = aten::t(%15), scope: AlexNet/Sequential[classifier]/Linear[6]
  %65 : Double(1, 1000) = aten::addmm(%16, %input, %64, %21, %21), scope: AlexNet/Sequential[classifier]/Linear[6]
  return (%65)
