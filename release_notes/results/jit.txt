ac103a5d78  # Remove variable wrapping from register_c10_ops (#29207)
c1c8105de0  # Make the warning of using SparseTensor in JIT less noisy
9c02b88791  # Add pickler support for Device (#30131)
d4c25add45  # make sure the counter stays correct in between bailout transitions (#30186)
ea3697db69  # inline to prevent duplicate obj when linking (#30363)
b26401f965  # Dump operator names of a script module (#30467)
d38f9117fd  # Cache compilation of free functions (#30503)
2308a0ec1b  # Improve documentation around builtin functions (#30347)
1707774417  # AddConstant and findConstant for ClassType (#29217)
569ea63f3b  # fix anynonzero op
9a858aba5f  # Moving checks related to options.aliasAnalysis and schema.hasAliasInfo to read callsite (#30671)
118f1c633b  # refactor the way we are handling bailout counts
648bb501a1  # rename shouldAnnotate api (#30543)
3eefc06feb  # add constant prop for immutable types (#30544)
82268bf300  # handle reassignment to inf and nan (#30877)
a03581b927  # add tests that schemas are valid (#30749)
446488960a  # polish up overloads on free functions (#30356)
af4040d808  # resubmit polish up overloads on free functions (#31014)
3de8584de8  # Correct definition of nodes that work with Autograd (#30683)
9f3fe78239  # peephole optimize type refinements (#31024)
1f87e823b8  # Make `nn.Transformer` TorchScript compatible (#28561)
44ecc3a70b  # Add tracing support for optional Device and Layout (#30979)
679b20b1e4  # Unify list elements for all list types (#30777)
85107e72b4  # Fix type unification With Specialized Tensor Shapes (#31076)
56de8853da  # Resubmit overload v2 (#31123)
5c936845cf  # fix torch_train build (#30497)
5ef0d6f854  # Remove subgraphNode kind assert in unmergeSubgraph (#31212)
f30b14dead  # Fix handling of type comments in body (#30590)
10ce1765be  # Introducing ScalarTypeType and LayoutType (#31074)
cc8d6342fc  # make profiling take no_grad flags into account (#31071)
e0ab255a51  # Updates to serialization.md (#31372)
4ec2448580  # Update OVERVIEW.md (#31373)
e5631119f6  # use expect instead of casting in register_c10_ops (#31401)
7e81d72d12  # remove unnecessary arg from create_script_module (#31017)
82d52bc718  # remove remnants of properties hack (#31018)
878b0e35f7  # Simplify recursive script compilation flow. (#31019)
3c8892aa0c  # avoid doing quadratic work in concrete type inference (#31020)
c05538b831  # Move TorchScript language reference to its own page (#31138)
fb30a48b4e  # add unsupported section (#31329)
1f50cfc24d  # Throw a better error for int too big for int64_t
7692494c67  # Fix hex literal parsing (#29935)
ae2487bf4d  # Move TorchScript language reference to its own page (#31138)
503a4e9019  # Cleanup after moving language reference (#31146)
148bcd3ee5  # Add support for builtins as attributes (#31269)
e7d25a3e4d  # add a suggested alternative to _get_trace_graph
e1509cb468  # Add support for `del` (#31273)
fb24f7c4ad  # catch all exceptions in converting default values to ivalues (#31398)
fc3103b116  # fixing a naming issue in creating a residual loop node in a bailout graph (#31400)
28376e826d  # Fix lint
57caeb3fc1  # Fix builtins table (#31492)
457286a383  # fix missing type check in dictionary literal
06dbef663d  # Add support for `del` (#31273)
256db1e61b  # Add fake parsing for torchbind classes in schema type parser
5375ceae80  # run optimizations on pre-profiled graph (#31392)
11854bcd38  # Add test to torch.jit.export_opnames, make the _C function private
68e5172382  # Support optional float parameters (float?, optional<double>). (#31517)
446e9af5b9  # Fix parsing of big float literals (#29940)
46ad80c839  # Fix null pointer dereference on Android for strtod_c (#31582)
363d8be787  # Bypass _TorchScriptTesting_StackString::pop in BC check now (#31586)
dd0f2f0c19  # add float[] str[] constants (#31503)
5fe3604987  # Preserve constant from ConcreteModuleType to ClassType (#29218)
8420f205ee  # Remove refs from ArrayRef arguments (#31845)
2bac76969c  # Fix getConstant (#31012)
6f62c311a1  # Add unsafeRemoveConstant for ClassType (#30787)
3c7db5ccbc  # Don't unconditionally compile runJITCPPTests (#31236)
3a2757c682  # Fix tracing for modules with List[Tensor] as output (#31343)
3c07eb33bb  # Better error for `torch::jit::load`ing a eager file (#31709)
883fb5434a  # Use real argument names for Python functions (#29300)
319cc21108  # Add AliasDb API For Changing Aliasing (#31501)
8ecd3f783d  # check for object equality in constant pooling (#31800)
1f34801460  # More robust mangling (#31978)
c036fbdc5c  # remove .data from torch/jit
61e509b992  # Skip un-runnable tests (#31965)
f3b67bf750  # Fix frontend kwarg defualts error (#32146)
02c3493a84  # Fix an invalid peephole transformation if input/output values are written to (#28455)
c70bb0a4f8  # Fixes to prim ops (#32179)
4dce482acb  # dict type unification fix (#32185)
90c65b81c3  # Define `repr()` on IValues (#32232)
53708e21ed  # classic fixed-point liveness
b79030d6c8  # remove unused code after refactoring optimizations into profiling-sensitive and profiling-insensitive (#32106)
4968bc2450  # cap the maximum depth of bailout chains at 1 (#32073)
e7bc1663bd  # fix unchecked cast alias analysis (#32309)
c7fdf5b251  # Remove __torch__ from custom class qualname
c7078a1ce8  # Fix returning instance of custom class from method
1ecad2bb2b  # Test passing custom class instance to bound method
e184a8843c  # Fix comparisions for ConcreteModuleType (#32256)
adf0916606  # Add str[] float[] constants resubmit
b01d824a78  # improve mayContainAlias (#31839)
69492ad6ac  # remove tuple logic in constant propagation (#31840)
38d122eca9  # implement tuple constants (#31841)
faffd2141a  # Corrected logical boolean expression (#32249)
193ac31441  # [jit] Enable IValue to hold a PyObject (#32491)
ef94496b36  # [JIT] throw if no self arg on ignored methods (#32503)
dbd29e5668  # [JIT] Passing custom class as arg (#32260)
7e14c420ae  # [JIT] Test __getstate__ and __setstate__ for custom bound C++ classes
ae42e232ce  # [JIT] Fix custom class method binding for const methods
69f9bf8893  # [JIT] Support returning tuple from custom bound C++ method
6745bfc31c  # Revert "Remove __torch__ from custom class qualname" (#32514)
6f146e1768  # [JIT] Remove capsule type handling of node hashing (#32540)
8fd3eaed25  # [jit] Fix dict type serialization (#32569)
7d0f0b62de  # API for testing bailouts (#32518)
ef5637f85e  # [jit] allow compilation using optional modules (#32539)
666472a38d  # [docs] Change fut.wait() to torch.jit._wait(fut) in jit overview docs (#32336)
e7edc5f20e  # [jit] Cloning constants in ClassType (#32371)
8fbe1ccd16  # faster bailout tests (#32266)
d68592a440  # [JIT] Fix classes as attributes in recursive scripting
63170431f9  # [jit] fix segfault on missing getstate (#32642)
c64dec1993  # Python binding to export bytecode format for lite interpreter (#32621)
0dc38be407  # consider FAIL_GUARD while counting indices for GUARDs (#32672)
1719da13f9  # [JIT] Support for registering C++ lambdas as methods on custom C++ class
06c19263d3  # [JIT] Serialize attributes and types in ClassType serialization
c729614997  # [JIT] Improve May Contain Alias Using Contained Elements (#32326)
5e2311033e  # fix windows build (#32762)
3552be1090  # [jit] fix the NoneType param/buffer hack (#32745)
affd598c1f  # Fix/simplify alias annotation handling in op codegen. (#32574)
c3b4bfcfed  # Add knobs to set the number of profiling runs and bailout depth (#32735)
660a93c558  # Code cleaning: Some iterating variables in builtin_functions.cpp can be const (#32852)
fe01376ffe  # [JIT] namedtuple constants (#32873)
10bd21d550  # [JIT] fix nested select assign (#32877)
4d7ab255d3  # [PyTorch][TorchScript] Add support for join on List of strings in TorchScript (#32847)
040bc1d0e1  # [JIT] make is_scripting a condvalue (#32871)
4cc6e6bbbe  # Adding scalar to the c10 registration type check
71ad88199a  # Clarify the searched string is displayed in the error message
ef50161ec9  # [JIT] Update OVERVIEW.md
37953d92d1  # raise when jit-load.ing a folder (#27836)
4f5908d5d7  # Remove unneded TORCH_API (#32015)
bc4790b3aa  # [JIT] Trace uses of torchbind classes as module attributes (#32833)
23a4800708  # [JIT] Make IRParser use op schema (#32854)
f393adc0ed  # [JIT] Fix python pickle serialization for torchbind (#32878)
836b4c9e64  # Attempt to workaround MSVC17 static constexpr bug
df1d68d52e  # [jit] fix parser for one-line functions (#32941)
74ce3a032c  # Fix some bugs with zipfile serialization (#32244)
38820a7014  # [JIT] Resolve custom classes in source importer (#32977)
ca33aeba09  # [JIT] Add Exit Transform / Convert To SSA to docs
f0d7bd41b9  # [jit] Minor: avoid recalculating some keys for map accesses in pickler. (#33060)
c6fa6d82ae  # move Decompose before profiling to prevent clearing shape info
6be4ec100f  # [pytorch] Elide more Thrift Tensor send copies. (#31998)
5bc5dd58f3  # [jit] fix a typo
72a00a8a9c  # Remove Node dependencies from operator.h (#32682)
99349defc1  # remove unnecessary Node* ops (#32760)
f045dab3dd  # Remove ImplicitTensorToNum (#32761)
f61b45fc89  # [jit] Support properties on `Device` (#32953)
bf16688538  # [JIT] peephole optimize values with NoneType (#33264)
b2c5896432  # [jit] Add RRef to IValue and JIT type system (#32992)
ecd9a5ad12  # Simplify prim::shape when we have complete tensor types. (#33336)
e1a895858f  # Allow to register custom passes both before and after fusion. (#33261)
d35a4c202e  # Add support for aten::slice to guard elimination. (#33311)
dde2ff4608  # [Fuser] Add a knob for disabling/enabling CUDA fuser. (#33395)
4c8064c9e1  # Fix avx-512 detection logic for jit fuser with MSVC 2019 (#33403)
1d743e3154  # Add guard elimination support for aten::unsqueeze. (#33371)
c59e35b147  # interpreter handling for varargs to remove need for looking at Node (#32791)
83c347ff4a  # Remove prim::Constant op (#32804)
d85c913bfd  # [jit] Delete the ErrorReport default constructor (#32879)
d13c1b8af8  # [jit] de-optionalize SourceRange context (#32880)
53ad596342  # [jit] Remove `torch.jit._dump_trace (#33453)
07e5e42713  # [jit][fix] Remove slot in parameter slot (#32846)
d4e4513a64  # [JIT] Add more ops to 'removableGuard' in guard elimination pass. (#33465)
cbf8657945  # [jit] Fix ModuleDict type sharing (#33515)
416413dec4  # [jit] add `inlined_graph` method to ScriptFunctions (#33508)
8527ba8b70  # [jit] Add None parameter as parameter instead of attributes (#32964)
36d724c963  # run peephole to do profile-based optimizations (#33337)
a943b0518b  # strict check for a device type in Fuser (#33025)
6cec555926  # Replace AT_CHECK with TORCH_CHECK in torch/csrc/jit/pybind_utils.h (#33524)
ee28831341  # [jit] Fix aug assign for non-tensor attributes (#32993)
d5b768dffd  # refactor strongTypePtr (#33590)
5fa03d4dbb  # Fix bug where we were trying to get a schema for prim::Constant, which is not registered as an operator. (#33645)
481e7f2e78  # catch and propagate warnings for JIT ScriptMethods (#33010)
dc3d47110a  # [docs] add experimental warning to TorchScript classes in language reference (#33697)
867990dc17  # [jit] Unify augmented assign handling (#33578)
057fd5e10d  # add support for _modules, reducing special casing of nn.Sequential (#29495)
4543cf4eb1  # [JIT] add support for torch.lu to torchscript (#33724)
f31b1d3453  # [JIT] add support for lu_unpack (#33736)
857eb4145e  # [JIT] add support for torch.cdist (#33737)
cea0cc8ca8  # [jit] Unify augmented assign handling (#33578)
9733711394  # [JIT] Support calling Tensor.element_size() in TorchScript (#33808)
f5952cf7cb  # fix lint (#33861)
390d4d6df3  # [JIT] Introduce a fake Tensor creation node for IR unit tests (#33595)
db4a24e008  # [jit] remove some unused/redundant files (#33806)
d6485b411b  # [jit] add top-level readme to csrc/jit (#33916)
8f84deddd1  # [jit] fix up refs in overview.md (#33919)
cb8d9f99aa  # [JIT] Implement Tensor.tolist() (#33472)
2f6ffe8c39  # [jit] Resolve type annotation names to types (#29623)
2111c4ff0c  # [jit] Add missing tensor properties (#33906)
85b1c45a45  # [JIT] fix alias assertion (#33952)
84ec5357d3  # Make HashNode visible (#34045)
f4532d7542  # Fix typo (#33925)
358450e02b  # improved TorchScript traceback (#33834)
04378eb618  # [JIT] Add modulelist indexing for integer literal (#29236)
e132047f1b  # [JIT] fix alias assertion (#34268)
3a4bac5c76  # Throw a proper error when parsing local variable annotations without assignments (#34133)
9ce833879f  # [JIT] Introduce a fake Tensor creation node for IR unit tests (#33914)
479c3b0aa5  # [JIT] add support for torch.norm (#33783)
f218842f2e  # [JIT] Add support for list() (#33818)
78aebbcb88  # [JIT] add other module apis (#34106)
5f641f93f1  # [aten] Don't deadlock in IValue::Future impl, tests. (#34099)
bb1114258c  # [JIT] Move stuff out of class_type.cpp (#33900)
2c0f3536b6  # [jit] Make `ModuleList`s a sugared value (#34320)
fea618b524  # [JIT] remove list with default builtin (#34171)
0a4a558c2c  # Dictionary Constants (#32869)
e16908cb1f  # profile block outputs; helps guard elimination (#33889)
2de4fa702b  # [JIT] Preserve qualified names on traced modules (#34395)
903ad90325  # [JIT] Introduce a fake Tensor creation node for IR unit tests (#34334)
9d42177a31  # Delete OperatorOptions, absorb AliasAnalysisKind into FunctionSchema. (#34160)
1f834b5c2a  # [JIT] Torchbind error if python instantiate class that doesnt exist (#34568)
56832bf7f3  # [JIT] Add support for tolist for GPU-resident Tensors (#34554)
cf8b728255  # Delete OperatorOptions, absorb AliasAnalysisKind into FunctionSchema. (#34588)
f9f8424386  # [JIT] remove specialized list ops (#34520)
352e9b11e0  # Attempt to resolve inconsistent dll linkage warnings on MSVC (#34639)
8c332ff84f  # [JIT] EliminateDeadCode shouldn't remove custom operator node that has untracked mutation (#34635)
44256199a9  # [JIT] remove specialized list ops (#34520)
c9023e3b12  # Support left and right shift operators in JIT (#34563)
52005b551c  # invokeOperatorFromPython: support overloaded operator calling (#34671)
fb20621b3b  # Move torchbind out of jit namespace (#34745)
d4f182d06b  # Add overloaded name to prim operators (#34280)
a57f92e4de  # [jit] copy unused/ignored methods to ScriptModule during compilation (#33981)
089a0a2117  # [torchbind] Test moving custom classes to/from IValue (#34847)
95833a49e6  # [TensorExpr] Pull changes from bertmaher/pytorch_fusion. (#34842)
a4224886f3  # Eliminate guards through max_pool ops. (#34512)
97757dca79  # Format register_ditributed_ops.cpp (#34922)
74a28ff1dd  # Make checkInputs more robust (#34838)
09a7788a2f  # [torchbind] Improve IValue custom class API and remove most Capsule stuff (#34848)
2a7a39c1af  # (de)serialization of values between C++ and Python (#30108)
1bb6c51421  # Fix getAttribute (#31011)
ebe69236d1  # Expose class constant through `attr` and `setattr` in object (#29219)
e3d50c4dda  # Retain the order of parameters while generating ConcreteModuleTypes (#34131)
14593f077f  # remove list specialization from ivalue (#30734)
7e3c438913  # Renaming IValue List functions (#32093)
7f2c25b6fa  # Move special ops into interpreter (#32889)
f1b73799d5  # Clean up isinstance flags (#33265)
99e211e661  # [jit] Add type tags to lists/dicts in pickle (#33255)
c5e822b7bb  # Back out "[jit] Add type tags to lists/dicts in pickle" (#34406)
23b2fba79a  # [jit] Add type tags to lists/dicts in pickle (#33255)
8c6f0c0587  # Detect TorchScript archives in torch.load (#29339)
7a2889b014  # Stop producing op_version_set version numbers.
7d630278da  # Separate torchbind from Python (#30242)
465ebd58ba  # [JIT] pickle serialization for custom bound classes
25d33a2ee8  # [JIT] Use Type Level Granularity in Alias Analysis Wildcards (#32251)
806e7daa1f  # Rename TorchScript compiler to IR emitter to better reflect its function. (#33127)
089d658153  # [TensorExpr] Add classes for memory management in tensor expressions. (#33216)
1a4f997178  # [TensorExpr] Add a class for representing data type. (#33217)
49af9425a7  # [TensorExpr] Add core classes for representing expressions and statements. (#33218)
fc70fc3610  # [TensorExpr] Add IR visitor, IR mutator, and IR evaluator. (#33219)
bb5181b716  # [TensorExpr] Add IR Printer. (#33220)
bf00b4d305  # [TensorExpr] Add a boilerplate pass for future TensorExpr fusion pass. (#33464)
cab8772c6c  # Freezing Torchscript modules (#32178)
9b39ad7f2c  # [jit] Fix iOS build (#34180)
2b79bab029  # [CUDA_FUSER] Fork CUDA fuser (#33527)
45a504dd2d  # [JIT] Introduce BuiltinOpFunction and integrate into torchbind (#34098)
965146b818  # [jit] delete netdef converter (#33807)
24c9e61e79  # Enable JIT tests on Windows (#27029)
e31d462e92  # [TensorExpr] Pull changes to core classes for representing expressions and statements from the side branch. (#34224)
42b2c8c65d  # [TensorExpr] Add a fuser pass based on tensor expressions. (#34226)
35e7efeb9a  # [TensorExpr] Add CUDA codegen. (#34227)
ea5c86c276  # [TensorExpr] Add LLVM codegen. (#34228)
dbe850af5b  # [jit] do the code reorg (#33851)
60e8615a6d  # [JIT] Virtualize Function (#33921)
c235be42dd  # [jit] kill script namespace (#34515)
4314620ba0  # [jit] Module clone work with shared ClassType (#31970)
53429680d5  # Remove stray `@script` (#32235)
fddf73250d  # [JIT] fix resolving of functions in torch/functional. fix compilation of torch.stft (#33504)
514cba0661  # [JIT] remove builtin interpolate functions (#34514)
af3a7e2b50  # [jit] small cleanups after script:: removal (#34677)
150e025be8  # [jit] stop printing crap in test_jit (#33779)
bd7e9c490a  # [jit] stop printing crap in test_jit (#33917)
293a139d79  # add a warning for script classes (#31069)
bee6344d4e  # remove / rewrite weak module tests (#31193)
fe707c7849  # Use `default_observer` and `default_weight_observer` in tests (#31424)
779b128872  # add back in reference to jit_unsupported section (#31486)
ec4e347744  # Add Python language reference docs (#30686)
5cc49ed45f  # Document `IValue` (#31904)
c299cb05ef  # temporary fix for jit test backward compatibility issues
67ff051ddd  # Remove temporary fix for torchbind in BC check (#31982)
